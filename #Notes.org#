* Haskell compiler components
** ghc - Compile to native code
** ghci - Interactive scripting
** runghc - Run Programs as script
* ghci operation
** loading files into ghci
:load file.hs
** commands starts with :
** :quit
** :set +t to refer to operation as variable it
** :unset +t
** :module + Data.Ratio to add module, - to remove it
** :m +Data.Int for short
** :type var to show the variable name
** also have constants like pi
** keyword let to define our own values, can also reassign 
   let e = exp 1
** assignment in script is diffrent, cannot reassign
x = 10 
x = 11 this will be illegal
** functions don't need parenthesis, parens required to control the order of execution.
** show what variables are there
:show bindings
** :set +m to allow multiline
** :set +s to show execution time
** :r to reload
** Lists
*** Simple list 
let l = [1,2,3]
*** Enumerated list 
let el= [1..10]
*** next item in sequence
succ 7
*** previous item in sequence
pred 8
*** Adding lists using ++
let bigger = [2,3,4] ++ [5..10]
*** Only same type of items in the list
*** Add item to the beginning :
let onemore = 2 : [3,4,5]
*** get first  item of the list
head
*** get rest of the list
tail
*** get n elements of list
take n list
*** get all but first n
drop n list
** String
*** goes into double quotes.
let string = "This is a big string."
*** character goes into single quotes.
let c = 'c'
*** this will be illegal
let twochar='ac'
*** print a string
putStrLn "Printing a string\n"
* Type System
** Everything has a type
** Strong, Static, and inferred
*** Char - Unicode
*** Bool
*** Int - Fixed Width, Can OverFlow
*** Integer - Unbounded, Expensive, overFlow Handled
*** Double
*** find type of object
:type val
*** functions have type signature
*** 
* Indentations are important
* Evaluation
** lazily, not evaluated until needed,short circuit
** unevaluated/deferred expression is called thunk, haskell keeps track
** haskell functions can be polymorphic, types can be parameterised 
:type last
last :: [a] -> a
last takes any list of type 'a' and return element from it.
** type variable name are  kept short 'a', 'b' etc
*  function can be called using infix operator  a1 `func` a2 a3 instead of func a1 a2 a3
** see if an element exists|not exist in a list
    3 `elem` [1,2,3] --> True
    elem 3 [1,2,3]  --> True
    4 `notElem` [1,2,3] --> True
**  isPrefixOf, isSuffixOf, and isInfixOf to match at the start, end, or middle of string.
** List Functions
*** module Data.List
*** get length 
    length [1,2,3] --> 3
*** test for empty
    null [] --> True
** Partial vs Complete function.
*** Partial can return Error
*** Complete never fails
*** get first item, not a complete function
    head [1,2,3] --> 1
*** remove only level of nesting from lists
    concat [[1,2],[3,4]] --> [1,2,3,4] 
*** add two lists (append)
     [1] ++ [2,3] --> [1,2,3]
*** reverse a list
    reverse [1,2,3]  --> [3,2,1]
*** return true of every element is True
    and [True,True,True] -> True
*** return true if at least one is True
    or [False,False,True] -> True
*** return true if function 'f' return true on every item of list
    all odd [1,3,5] --> True
*** return true if any item satifies predicate
    any even [1,2,3]  --> True
*** get first 4 items of list
    take 4 "testing" --> test
*** drop first 3 elements
    drop 3 [1,2,3,4] --> [4]
*** split list
    splitAt 2 [1,2,3] --> ([1,2],[3])
*** keep returning the items while predicate is true
    takeWhile odd [1,3,5,6,9] --> [1,3,5]
*** drop elements while predicate is true
    dropWhile odd [1,3,5,6,7] --> [6.7]
*** break and return tuple of two lists until predicate keeps failing
    span even [1,3,5,6,7] --> ([1,3,5],[6,7])
*** break at the point where predicate becomes true
    break even [1,3,5,6,8,9,10] --> ([1,3,5],[6,8,9,10])
*** search thorugh a list and return a new list
    filter odd [2,3,4,5,6,7] --> [3,5,7]
*** combine two lists into list of pairs
    zip [1,2,3] "Hello there" --> [(1,'H'),(2,'e'),(3,'l')]
*** Combine two lists applying predicate
    zipWith (+) [1..3] [4..6]  --> [5,7,9]
*** return lines
    lines "One line.\nTwo line." --> ["One line.","Two Line."]
*** return list of words
    words "this is \n another" --> ["this","is", "Another"]
*** list of string to single string
    unword ["this","is","it."] --> "this is it."

